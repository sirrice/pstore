from scipy.optimize import curve_fit
import numpy as np
import math



data = """1	1	1	4	4	12288	4096	8192	3
10	1	1	4	4	12288	4096	8192	3
100	1	1	4	4	12288	4096	8192	3
1000	1	1	4	4	24576	8192	16384	3
1	10	1	40	4	12288	4096	8192	3
10	10	1	40	4	12288	4096	8192	3
100	10	1	40	4	28672	8192	20480	3
1000	10	1	40	4	114688	45056	69632	2
1	100	1	400	4	12288	4096	8192	3
10	100	1	400	4	28672	4096	24576	7
100	100	1	400	4	114688	40960	73728	2
1000	100	1	400	4	958464	405504	552960	2
1	1000	1	4000	4	16384	4096	12288	4
10	1000	1	4000	4	53248	40960	12288	1
100	1000	1	4000	4	421888	401408	20480	1
1000	1000	1	4000	4	4153344	4005888	147456	1
1	1	10	4	40	12288	4096	8192	3
10	1	10	4	40	12288	4096	8192	3
100	1	10	4	40	12288	8192	4096	1
1000	1	10	4	40	81920	45056	36864	1
1	10	10	40	40	12288	4096	8192	3
10	10	10	40	40	12288	4096	8192	3
100	10	10	40	40	28672	8192	20480	3
1000	10	10	40	40	212992	81920	131072	2
1	100	10	400	40	12288	4096	8192	3
10	100	10	400	40	28672	8192	20480	3
100	100	10	400	40	114688	45056	69632	2
1000	100	10	400	40	958464	442368	516096	2
1	1000	10	4000	40	16384	4096	12288	4
10	1000	10	4000	40	53248	40960	12288	1
100	1000	10	4000	40	434176	405504	28672	1
1000	1000	10	4000	40	4222976	4042752	180224	1
1	1	100	4	400	12288	4096	8192	3
10	1	100	4	400	12288	4096	8192	3
100	1	100	4	400	86016	40960	45056	2
1000	1	100	4	400	647168	405504	241664	1
1	10	100	40	400	12288	4096	8192	3
10	10	100	40	400	28672	8192	20480	3
100	10	100	40	400	114688	45056	69632	2
1000	10	100	40	400	929792	442368	487424	2
1	100	100	400	400	12288	4096	8192	3
10	100	100	400	400	28672	8192	20480	3
100	100	100	400	400	212992	81920	131072	2
1000	100	100	400	400	1806336	802816	1003520	2
1	1000	100	4000	400	16384	8192	8192	2
10	1000	100	4000	400	69632	45056	24576	1
100	1000	100	4000	400	524288	442368	81920	1
1000	1000	100	4000	400	5058560	4403200	655360	1
1	1	1000	4	4000	16384	4096	12288	4
10	1	1000	4	4000	53248	40960	12288	1
100	1	1000	4	4000	421888	401408	20480	1
1000	1	1000	4	4000	4136960	4005888	131072	1
1	10	1000	40	4000	16384	4096	12288	4
10	10	1000	40	4000	53248	40960	12288	1
100	10	1000	40	4000	434176	405504	28672	1
1000	10	1000	40	4000	4210688	4042752	167936	1
1	100	1000	400	4000	16384	8192	8192	2
10	100	1000	400	4000	69632	45056	24576	1
100	100	1000	400	4000	524288	442368	81920	1
1000	100	1000	400	4000	5046272	4403200	643072	1
1	1000	1000	4000	4000	20480	8192	12288	2
10	1000	1000	4000	4000	94208	81920	12288	1
100	1000	1000	4000	4000	831488	802816	28672	1
1000	1000	1000	4000	4000	8253440	8003584	249856	1"""

data = """1	1	1000	50
10	1	1000	50
100	1	1000	49
1000	1	1000	63
2000	1	1000	81
5000	1	1000	175
10000	1	1000	286
1	10	1000	51
10	10	1000	50
100	10	1000	50
1000	10	1000	66
2000	10	1000	86
5000	10	1000	164
10000	10	1000	321
1	100	1000	54
10	100	1000	64
100	100	1000	52
1000	100	1000	79
2000	100	1000	129
5000	100	1000	313
10000	100	1000	615
1	1000	1000	54
10	1000	1000	52
100	1000	1000	54
1000	1000	1000	107
2000	1000	1000	332
5000	1000	1000	1252
10000	1000	1000	3285"""

data = [map(int, line.split('\t')) for line in data.split('\n')]
data = np.array(data)
minn = 0


def f(xss, a, b, c, d):
    ret = []
    for x in xss:
        n, i, j = x[0], x[1], x[2]
        ret.append((i + j) * n * a  + d)
        #ret.append((i * 4.25 + j * 4.25) * n * a +  n * c + 12288)
    return ret

block = data.shape[0]
for minn in xrange(0, data.shape[0], block):
    xdata = data[minn:minn+block, (0, 1, 2)]
    #ydata = data[minn:minn+block, -4]
    ydata = data[minn:minn+block, 3]
    if not len(xdata): break
    
    
    popt, pcov = curve_fit(f, xdata, ydata)

    popt = map(float, popt)

    for x, y in zip(xdata, ydata):
        n, i, j = x[0], x[1], x[2]
        y2 = (i + j) * 4.25 * n * popt[0] +  n * popt[2] + 12288
        y2 = (i + j) * n * popt[0] + popt[3]
        dat = ( n,i,j,y2, y, y / y2 )
        print '\t'.join(['%s']*len(dat)) % dat

    print '%f\t' * 4 % tuple(popt)
    print pcov


exit()


ys = np.array([0.09, 0.3, 5.68])
ys = np.array([1,4,15])
ys = np.array([0.100357,0.10875,0.431219])
xs = np.array([1, 0.1, 0.01])

def f(xs, a, b, c):
    ret = []
    for x in xs:
        ret.append(a + b / math.pow(x, c))
    return ret
popt, pcov = curve_fit(f, xs, ys)

print f(np.array([1,0.1,0.01,0.001]), *popt)

print map(float, popt)
print pcov


# ys = np.array([0.0322428941726685,0.00215978622436523,0.00177663564682007,0.00187919139862061])
# ys = np.array([float('6.9301894732884e-05'), float('8.52587677183605e-06'),
#                float('5.09910640262422e-06'), float('4.42791552770706e-06')])
# xs = np.array([1,25,64,100])
# #ys = np.array([0.0334906578063965,0.00186474323272705,0.00111260414123535,0.00100641250610352])

# def f(xs, a, b, c):
#     return a + b / (xs ** c)
#     fanin, fanout = xs[:,0], xs[:,1]
#     return a + b*fanin# + c*fanout
# popt, pcov = curve_fit(f, xs, ys)
# print map(float,popt)
# print pcov


